// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'objbox/models/Agente.dart';
import 'objbox/models/Anagrafica.dart';
import 'objbox/models/Appuntamento.dart';
import 'objbox/models/ClasseCliente.dart';
import 'objbox/models/ClasseEnergetica.dart';
import 'objbox/models/Colloquio.dart';
import 'objbox/models/Contatto.dart';
import 'objbox/models/DatiCatastali.dart';
import 'objbox/models/Immagine.dart';
import 'objbox/models/Immobile.dart';
import 'objbox/models/Riscaldamento.dart';
import 'objbox/models/StanzaImmobile.dart';
import 'objbox/models/StatoConservativo.dart';
import 'objbox/models/TipologiaAppuntamento.dart';
import 'objbox/models/TipologiaColloquio.dart';
import 'objbox/models/TipologiaContatto.dart';
import 'objbox/models/TipologiaImmobile.dart';
import 'objbox/models/TipologiaStanza.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 3334807128168569771),
      name: 'Agente',
      lastPropertyId: const obx_int.IdUid(7, 4046485694599123046),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8125323382256579544),
            name: 'codAgente',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 536150313242298541),
            name: 'nome',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6771243325538458712),
            name: 'cognome',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8868800649808005006),
            name: 'indirizzo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5131541373315090455),
            name: 'provincia',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 478959435137158662),
            name: 'cap',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4046485694599123046),
            name: 'citta',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 7023555128310139918),
            name: 'contatti',
            targetId: const obx_int.IdUid(7, 2615396367283971534))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 293834241018180873),
      name: 'Anagrafica',
      lastPropertyId: const obx_int.IdUid(15, 1976105393612947449),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3991662483840366966),
            name: 'codAnagrafica',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4212971853225248393),
            name: 'nome',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7482258137369289476),
            name: 'cognome',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7082599049341396300),
            name: 'ragioneSociale',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4161067742836442343),
            name: 'indirizzo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7872667482917690496),
            name: 'provincia',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2624008835161441722),
            name: 'cap',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 513979589412167939),
            name: 'citta',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 5904741797045832547),
            name: 'dataInserimento',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 3768934046823486098),
            name: 'commento',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 5170091809440288899),
            name: 'storico',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 5122428428113654687),
            name: 'classeClienteId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 3651494731106722530),
            relationTarget: 'ClasseCliente'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 1555300741180730181),
            name: 'agenteInseritoreId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 2384026597163870618),
            relationTarget: 'Agente'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 5248164797857153765),
            name: 'codiceFiscale',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 1976105393612947449),
            name: 'partitaIva',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(2, 4039948748120618032),
            name: 'contatti',
            targetId: const obx_int.IdUid(7, 2615396367283971534)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(3, 3384212362482549163),
            name: 'immobiliAbbinati',
            targetId: const obx_int.IdUid(10, 7568040681083448512)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(4, 2488102019203560600),
            name: 'appuntamenti',
            targetId: const obx_int.IdUid(3, 3386994393142097222))
      ],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'proprieta', srcEntity: 'Immobile', srcField: 'proprietari'),
        obx_int.ModelBacklink(
            name: 'colloqui', srcEntity: 'Colloquio', srcField: 'anagrafiche')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 3386994393142097222),
      name: 'Appuntamento',
      lastPropertyId: const obx_int.IdUid(8, 6791278265499198252),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1031493790292428925),
            name: 'codAppuntamento',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3510752533243807587),
            name: 'dataInserimento',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2572815042272295374),
            name: 'dataAppuntamento',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6408686707732839106),
            name: 'dataFineAppuntamento',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6445893869525913670),
            name: 'tipologiaAppuntamentoId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 3749888365003755907),
            relationTarget: 'TipologiaAppuntamento'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2617473071310645589),
            name: 'iCalUID',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5854253723692417849),
            name: 'descrizione',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6791278265499198252),
            name: 'luogo',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(5, 7217293475738464147),
            name: 'agentiAppuntamento',
            targetId: const obx_int.IdUid(1, 3334807128168569771)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(6, 4096066746976289664),
            name: 'anagraficheAppuntamento',
            targetId: const obx_int.IdUid(2, 293834241018180873))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 8305021363737730809),
      name: 'ClasseCliente',
      lastPropertyId: const obx_int.IdUid(3, 6175576960365965449),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 56306002536798439),
            name: 'codClasseCliente',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3423395125627228412),
            name: 'descrizione',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6175576960365965449),
            name: 'ordine',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 3486250422912623810),
      name: 'ClasseEnergetica',
      lastPropertyId: const obx_int.IdUid(4, 181059551236235139),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5801172842275819042),
            name: 'codClasseEnergetica',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1240996009696297523),
            name: 'nome',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3716118558727398528),
            name: 'descrizione',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 181059551236235139),
            name: 'ordine',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 7264299303928495224),
      name: 'Colloquio',
      lastPropertyId: const obx_int.IdUid(13, 7855911986131007569),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1488921870283474212),
            name: 'codColloquio',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4037900982877171560),
            name: 'descrizione',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7972796733965140876),
            name: 'agenteInseritoreId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(4, 274129033762138685),
            relationTarget: 'Agente'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2041143938119400373),
            name: 'immobileAbbinatoId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(5, 6205787909942637107),
            relationTarget: 'Immobile'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5332943791178424888),
            name: 'tipologiaColloquioId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(6, 2215281331890157229),
            relationTarget: 'TipologiaColloquio'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8055596392458351050),
            name: 'dataInserimento',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2173107458707526075),
            name: 'dataColloquio',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8635350375227793994),
            name: 'luogoIncontro',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 5578520564390687318),
            name: 'scadenziere',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 6346005511698437196),
            name: 'commentoAgenzia',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 4094674872537589080),
            name: 'commentoCliente',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 2597331402829640823),
            name: 'codParent',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 7855911986131007569),
            name: 'iCalUid',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(13, 6144246402560499746),
            name: 'anagrafiche',
            targetId: const obx_int.IdUid(2, 293834241018180873))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 2615396367283971534),
      name: 'Contatto',
      lastPropertyId: const obx_int.IdUid(7, 7149749818544586331),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1015198916279125545),
            name: 'codContatto',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4480126769304402682),
            name: 'contatto',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 475737335009608575),
            name: 'descrizione',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2676831331147867251),
            name: 'codTipologiaContatto',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6096443767477058927),
            name: 'codAnagrafica',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5602581258018352555),
            name: 'codAgente',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7149749818544586331),
            name: 'tipologiaContattoId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(7, 1010470763393771000),
            relationTarget: 'TipologiaContatto')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(8, 4081961382466290516),
      name: 'DatiCatastali',
      lastPropertyId: const obx_int.IdUid(10, 6295696732597831458),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 882897867477262351),
            name: 'codDatiCatastali',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2818479105138481054),
            name: 'foglio',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8131052404761059223),
            name: 'particella',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7614976630413296555),
            name: 'subalterno',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4895107570644328952),
            name: 'categoria',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1521654928903175763),
            name: 'rendita',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6876839432900119328),
            name: 'redditoDomenicale',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 178141845310951477),
            name: 'redditoAgricolo',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 927130204303300379),
            name: 'dimensione',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 6295696732597831458),
            name: 'codImmobile',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(9, 757328395889382841),
      name: 'Immagine',
      lastPropertyId: const obx_int.IdUid(5, 6663865456837484252),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7699746990000329512),
            name: 'codImmagine',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5440983258152161213),
            name: 'codImmobile',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3655538332132439337),
            name: 'ordine',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2834260834398836247),
            name: 'pathImmagine',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6663865456837484252),
            name: 'imgPropsStr',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(10, 7568040681083448512),
      name: 'Immobile',
      lastPropertyId: const obx_int.IdUid(25, 7471632642035551421),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8134050888706473649),
            name: 'codImmobile',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 982283752963554582),
            name: 'rif',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2963188051241610411),
            name: 'indirizzo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7309069188943430877),
            name: 'provincia',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8829512485097932401),
            name: 'cap',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7648577875566662567),
            name: 'citta',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8505832860312742490),
            name: 'zona',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 321104500892783892),
            name: 'dataInserimento',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 8826654615270205068),
            name: 'dataLibero',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 2009247384368534895),
            name: 'descrizione',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 7862715026997169534),
            name: 'mutuoDescrizione',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 4893070602423674692),
            name: 'prezzo',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 380850130265908028),
            name: 'mutuo',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 927313726822821296),
            name: 'spese',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 4527175858319372576),
            name: 'varie',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 4295002648886671971),
            name: 'visione',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 8639697153603640448),
            name: 'storico',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 8717782834513168334),
            name: 'affittabile',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 4020874955991273171),
            name: 'mq',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 6444433413149699751),
            name: 'annoCostruzione',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 7663598501579642842),
            name: 'agenteInseritoreId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(8, 7929509765618067149),
            relationTarget: 'Agente'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 6679120532569650775),
            name: 'riscaldamentoId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(9, 8216283141336157921),
            relationTarget: 'Riscaldamento'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 5686169327166007856),
            name: 'statoConservativoId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(10, 382696995089959586),
            relationTarget: 'StatoConservativo'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 2120823047171190231),
            name: 'tipologiaImmobileId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(11, 7639890443565691167),
            relationTarget: 'TipologiaImmobile'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(25, 7471632642035551421),
            name: 'classeEnergeticaId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(12, 4282630748260591132),
            relationTarget: 'ClasseEnergetica')
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(8, 734706892945463092),
            name: 'stanze',
            targetId: const obx_int.IdUid(12, 7637466687066493278)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(10, 7789457817926044058),
            name: 'immagini',
            targetId: const obx_int.IdUid(9, 757328395889382841)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(12, 8835141306723881424),
            name: 'proprietari',
            targetId: const obx_int.IdUid(2, 293834241018180873))
      ],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'colloqui', srcEntity: 'Colloquio', srcField: '')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(11, 6261678428064405502),
      name: 'Riscaldamento',
      lastPropertyId: const obx_int.IdUid(2, 4552832517303043960),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8388491397889393561),
            name: 'codRiscaldamento',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4552832517303043960),
            name: 'descrizione',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(12, 7637466687066493278),
      name: 'StanzaImmobile',
      lastPropertyId: const obx_int.IdUid(4, 4659736222864569640),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2785227346138468212),
            name: 'codStanzaImmobile',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8907589801466336892),
            name: 'codImmobile',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5709467713778893720),
            name: 'tipologiaStanzaId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(13, 8510568089575891598),
            relationTarget: 'TipologiaStanza'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4659736222864569640),
            name: 'mq',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(13, 78095892710267260),
      name: 'StatoConservativo',
      lastPropertyId: const obx_int.IdUid(2, 2506954189293363471),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 832383944653527778),
            name: 'codStatoConservativo',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2506954189293363471),
            name: 'descrizione',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(14, 6363396343229116270),
      name: 'TipologiaAppuntamento',
      lastPropertyId: const obx_int.IdUid(4, 4269823461443388400),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7396574461806172172),
            name: 'codTipologiaAppuntamento',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4231777248974000754),
            name: 'descrizione',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6038671342953004944),
            name: 'gCalColor',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4269823461443388400),
            name: 'ordine',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(15, 5181767849494525414),
      name: 'TipologiaColloquio',
      lastPropertyId: const obx_int.IdUid(2, 1552866231508454639),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1349533958703883290),
            name: 'codTipologiaColloquio',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1552866231508454639),
            name: 'descrizione',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(16, 763542966046052396),
      name: 'TipologiaContatto',
      lastPropertyId: const obx_int.IdUid(2, 4703598772050029837),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4650064342384010061),
            name: 'codTipologiaContatto',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4703598772050029837),
            name: 'descrizione',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(17, 4044006737828550810),
      name: 'TipologiaImmobile',
      lastPropertyId: const obx_int.IdUid(2, 2322599607388358549),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6490459769903761696),
            name: 'codTipologiaImmobile',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2322599607388358549),
            name: 'descrizione',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(18, 4409652037449677777),
      name: 'TipologiaStanza',
      lastPropertyId: const obx_int.IdUid(2, 3842500601377659165),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3158044831427994832),
            name: 'codTipologiaStanza',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3842500601377659165),
            name: 'descrizione',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(18, 4409652037449677777),
      lastIndexId: const obx_int.IdUid(13, 8510568089575891598),
      lastRelationId: const obx_int.IdUid(13, 6144246402560499746),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [
        444762249311848945,
        5185577959448678342,
        5759117127510008189
      ],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Agente: obx_int.EntityDefinition<Agente>(
        model: _entities[0],
        toOneRelations: (Agente object) => [],
        toManyRelations: (Agente object) => {
              obx_int.RelInfo<Agente>.toMany(1, object.codAgente!):
                  object.contatti
            },
        getId: (Agente object) => object.codAgente,
        setId: (Agente object, int id) {
          object.codAgente = id;
        },
        objectToFB: (Agente object, fb.Builder fbb) {
          final nomeOffset =
              object.nome == null ? null : fbb.writeString(object.nome!);
          final cognomeOffset =
              object.cognome == null ? null : fbb.writeString(object.cognome!);
          final indirizzoOffset = object.indirizzo == null
              ? null
              : fbb.writeString(object.indirizzo!);
          final provinciaOffset = object.provincia == null
              ? null
              : fbb.writeString(object.provincia!);
          final capOffset =
              object.cap == null ? null : fbb.writeString(object.cap!);
          final cittaOffset =
              object.citta == null ? null : fbb.writeString(object.citta!);
          fbb.startTable(8);
          fbb.addInt64(0, object.codAgente ?? 0);
          fbb.addOffset(1, nomeOffset);
          fbb.addOffset(2, cognomeOffset);
          fbb.addOffset(3, indirizzoOffset);
          fbb.addOffset(4, provinciaOffset);
          fbb.addOffset(5, capOffset);
          fbb.addOffset(6, cittaOffset);
          fbb.finish(fbb.endTable());
          return object.codAgente ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Agente()
            ..codAgente =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..nome = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..cognome = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..indirizzo = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..provincia = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..cap = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14)
            ..citta = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 16);
          obx_int.InternalToManyAccess.setRelInfo<Agente>(object.contatti,
              store, obx_int.RelInfo<Agente>.toMany(1, object.codAgente!));
          return object;
        }),
    Anagrafica: obx_int.EntityDefinition<Anagrafica>(
        model: _entities[1],
        toOneRelations: (Anagrafica object) =>
            [object.classeCliente, object.agenteInseritore],
        toManyRelations: (Anagrafica object) => {
              obx_int.RelInfo<Anagrafica>.toMany(2, object.codAnagrafica!):
                  object.contatti,
              obx_int.RelInfo<Anagrafica>.toMany(3, object.codAnagrafica!):
                  object.immobiliAbbinati,
              obx_int.RelInfo<Anagrafica>.toMany(4, object.codAnagrafica!):
                  object.appuntamenti,
              obx_int.RelInfo<Immobile>.toManyBacklink(
                  12, object.codAnagrafica!): object.proprieta,
              obx_int.RelInfo<Colloquio>.toManyBacklink(
                  13, object.codAnagrafica!): object.colloqui
            },
        getId: (Anagrafica object) => object.codAnagrafica,
        setId: (Anagrafica object, int id) {
          object.codAnagrafica = id;
        },
        objectToFB: (Anagrafica object, fb.Builder fbb) {
          final nomeOffset =
              object.nome == null ? null : fbb.writeString(object.nome!);
          final cognomeOffset =
              object.cognome == null ? null : fbb.writeString(object.cognome!);
          final ragioneSocialeOffset = object.ragioneSociale == null
              ? null
              : fbb.writeString(object.ragioneSociale!);
          final indirizzoOffset = object.indirizzo == null
              ? null
              : fbb.writeString(object.indirizzo!);
          final provinciaOffset = object.provincia == null
              ? null
              : fbb.writeString(object.provincia!);
          final capOffset =
              object.cap == null ? null : fbb.writeString(object.cap!);
          final cittaOffset =
              object.citta == null ? null : fbb.writeString(object.citta!);
          final commentoOffset = object.commento == null
              ? null
              : fbb.writeString(object.commento!);
          final codiceFiscaleOffset = object.codiceFiscale == null
              ? null
              : fbb.writeString(object.codiceFiscale!);
          final partitaIvaOffset = object.partitaIva == null
              ? null
              : fbb.writeString(object.partitaIva!);
          fbb.startTable(16);
          fbb.addInt64(0, object.codAnagrafica ?? 0);
          fbb.addOffset(1, nomeOffset);
          fbb.addOffset(2, cognomeOffset);
          fbb.addOffset(3, ragioneSocialeOffset);
          fbb.addOffset(4, indirizzoOffset);
          fbb.addOffset(5, provinciaOffset);
          fbb.addOffset(6, capOffset);
          fbb.addOffset(7, cittaOffset);
          fbb.addInt64(8, object.dataInserimento?.millisecondsSinceEpoch);
          fbb.addOffset(9, commentoOffset);
          fbb.addBool(10, object.storico);
          fbb.addInt64(11, object.classeCliente.targetId);
          fbb.addInt64(12, object.agenteInseritore.targetId);
          fbb.addOffset(13, codiceFiscaleOffset);
          fbb.addOffset(14, partitaIvaOffset);
          fbb.finish(fbb.endTable());
          return object.codAnagrafica ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dataInserimentoValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final object = Anagrafica()
            ..codAnagrafica =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..nome = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..cognome = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..ragioneSociale = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..indirizzo = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..provincia = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14)
            ..cap = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 16)
            ..citta = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 18)
            ..dataInserimento = dataInserimentoValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(dataInserimentoValue)
            ..commento = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 22)
            ..storico =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 24)
            ..codiceFiscale = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 30)
            ..partitaIva = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 32);
          object.classeCliente.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.classeCliente.attach(store);
          object.agenteInseritore.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.agenteInseritore.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<Anagrafica>(
              object.contatti,
              store,
              obx_int.RelInfo<Anagrafica>.toMany(2, object.codAnagrafica!));
          obx_int.InternalToManyAccess.setRelInfo<Anagrafica>(
              object.immobiliAbbinati,
              store,
              obx_int.RelInfo<Anagrafica>.toMany(3, object.codAnagrafica!));
          obx_int.InternalToManyAccess.setRelInfo<Anagrafica>(
              object.appuntamenti,
              store,
              obx_int.RelInfo<Anagrafica>.toMany(4, object.codAnagrafica!));
          obx_int.InternalToManyAccess.setRelInfo<Anagrafica>(
              object.proprieta,
              store,
              obx_int.RelInfo<Immobile>.toManyBacklink(
                  12, object.codAnagrafica!));
          obx_int.InternalToManyAccess.setRelInfo<Anagrafica>(
              object.colloqui,
              store,
              obx_int.RelInfo<Colloquio>.toManyBacklink(
                  13, object.codAnagrafica!));
          return object;
        }),
    Appuntamento: obx_int.EntityDefinition<Appuntamento>(
        model: _entities[2],
        toOneRelations: (Appuntamento object) => [object.tipologiaAppuntamento],
        toManyRelations: (Appuntamento object) => {
              obx_int.RelInfo<Appuntamento>.toMany(5, object.codAppuntamento!):
                  object.agentiAppuntamento,
              obx_int.RelInfo<Appuntamento>.toMany(6, object.codAppuntamento!):
                  object.anagraficheAppuntamento
            },
        getId: (Appuntamento object) => object.codAppuntamento,
        setId: (Appuntamento object, int id) {
          object.codAppuntamento = id;
        },
        objectToFB: (Appuntamento object, fb.Builder fbb) {
          final iCalUIDOffset =
              object.iCalUID == null ? null : fbb.writeString(object.iCalUID!);
          final descrizioneOffset = object.descrizione == null
              ? null
              : fbb.writeString(object.descrizione!);
          final luogoOffset =
              object.luogo == null ? null : fbb.writeString(object.luogo!);
          fbb.startTable(9);
          fbb.addInt64(0, object.codAppuntamento ?? 0);
          fbb.addInt64(1, object.dataInserimento?.millisecondsSinceEpoch);
          fbb.addInt64(2, object.dataAppuntamento?.millisecondsSinceEpoch);
          fbb.addInt64(3, object.dataFineAppuntamento?.millisecondsSinceEpoch);
          fbb.addInt64(4, object.tipologiaAppuntamento.targetId);
          fbb.addOffset(5, iCalUIDOffset);
          fbb.addOffset(6, descrizioneOffset);
          fbb.addOffset(7, luogoOffset);
          fbb.finish(fbb.endTable());
          return object.codAppuntamento ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dataInserimentoValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final dataAppuntamentoValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final dataFineAppuntamentoValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final object = Appuntamento()
            ..codAppuntamento =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..dataInserimento = dataInserimentoValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(dataInserimentoValue)
            ..dataAppuntamento = dataAppuntamentoValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(dataAppuntamentoValue)
            ..dataFineAppuntamento = dataFineAppuntamentoValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(dataFineAppuntamentoValue)
            ..iCalUID = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14)
            ..descrizione = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 16)
            ..luogo = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 18);
          object.tipologiaAppuntamento.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.tipologiaAppuntamento.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<Appuntamento>(
              object.agentiAppuntamento,
              store,
              obx_int.RelInfo<Appuntamento>.toMany(5, object.codAppuntamento!));
          obx_int.InternalToManyAccess.setRelInfo<Appuntamento>(
              object.anagraficheAppuntamento,
              store,
              obx_int.RelInfo<Appuntamento>.toMany(6, object.codAppuntamento!));
          return object;
        }),
    ClasseCliente: obx_int.EntityDefinition<ClasseCliente>(
        model: _entities[3],
        toOneRelations: (ClasseCliente object) => [],
        toManyRelations: (ClasseCliente object) => {},
        getId: (ClasseCliente object) => object.codClasseCliente,
        setId: (ClasseCliente object, int id) {
          object.codClasseCliente = id;
        },
        objectToFB: (ClasseCliente object, fb.Builder fbb) {
          final descrizioneOffset = object.descrizione == null
              ? null
              : fbb.writeString(object.descrizione!);
          fbb.startTable(4);
          fbb.addInt64(0, object.codClasseCliente ?? 0);
          fbb.addOffset(1, descrizioneOffset);
          fbb.addInt64(2, object.ordine);
          fbb.finish(fbb.endTable());
          return object.codClasseCliente ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ClasseCliente()
            ..codClasseCliente =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..descrizione = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..ordine =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);

          return object;
        }),
    ClasseEnergetica: obx_int.EntityDefinition<ClasseEnergetica>(
        model: _entities[4],
        toOneRelations: (ClasseEnergetica object) => [],
        toManyRelations: (ClasseEnergetica object) => {},
        getId: (ClasseEnergetica object) => object.codClasseEnergetica,
        setId: (ClasseEnergetica object, int id) {
          object.codClasseEnergetica = id;
        },
        objectToFB: (ClasseEnergetica object, fb.Builder fbb) {
          final nomeOffset =
              object.nome == null ? null : fbb.writeString(object.nome!);
          final descrizioneOffset = object.descrizione == null
              ? null
              : fbb.writeString(object.descrizione!);
          fbb.startTable(5);
          fbb.addInt64(0, object.codClasseEnergetica ?? 0);
          fbb.addOffset(1, nomeOffset);
          fbb.addOffset(2, descrizioneOffset);
          fbb.addInt64(3, object.ordine);
          fbb.finish(fbb.endTable());
          return object.codClasseEnergetica ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ClasseEnergetica()
            ..codClasseEnergetica =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..nome = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..descrizione = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..ordine = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 10);

          return object;
        }),
    Colloquio: obx_int.EntityDefinition<Colloquio>(
        model: _entities[5],
        toOneRelations: (Colloquio object) => [
              object.agenteInseritore,
              object.immobileAbbinato,
              object.tipologiaColloquio
            ],
        toManyRelations: (Colloquio object) => {
              obx_int.RelInfo<Colloquio>.toMany(13, object.codColloquio!):
                  object.anagrafiche
            },
        getId: (Colloquio object) => object.codColloquio,
        setId: (Colloquio object, int id) {
          object.codColloquio = id;
        },
        objectToFB: (Colloquio object, fb.Builder fbb) {
          final descrizioneOffset = object.descrizione == null
              ? null
              : fbb.writeString(object.descrizione!);
          final luogoIncontroOffset = object.luogoIncontro == null
              ? null
              : fbb.writeString(object.luogoIncontro!);
          final commentoAgenziaOffset = object.commentoAgenzia == null
              ? null
              : fbb.writeString(object.commentoAgenzia!);
          final commentoClienteOffset = object.commentoCliente == null
              ? null
              : fbb.writeString(object.commentoCliente!);
          final iCalUidOffset =
              object.iCalUid == null ? null : fbb.writeString(object.iCalUid!);
          fbb.startTable(14);
          fbb.addInt64(0, object.codColloquio ?? 0);
          fbb.addOffset(1, descrizioneOffset);
          fbb.addInt64(2, object.agenteInseritore.targetId);
          fbb.addInt64(3, object.immobileAbbinato.targetId);
          fbb.addInt64(4, object.tipologiaColloquio.targetId);
          fbb.addInt64(5, object.dataInserimento?.millisecondsSinceEpoch);
          fbb.addInt64(6, object.dataColloquio?.millisecondsSinceEpoch);
          fbb.addOffset(7, luogoIncontroOffset);
          fbb.addBool(8, object.scadenziere);
          fbb.addOffset(9, commentoAgenziaOffset);
          fbb.addOffset(10, commentoClienteOffset);
          fbb.addInt64(11, object.codParent);
          fbb.addOffset(12, iCalUidOffset);
          fbb.finish(fbb.endTable());
          return object.codColloquio ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dataInserimentoValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final dataColloquioValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final object = Colloquio()
            ..codColloquio =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..descrizione = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..dataInserimento = dataInserimentoValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(dataInserimentoValue)
            ..dataColloquio = dataColloquioValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(dataColloquioValue)
            ..luogoIncontro = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 18)
            ..scadenziere =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 20)
            ..commentoAgenzia = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 22)
            ..commentoCliente = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 24)
            ..codParent =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 26)
            ..iCalUid = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 28);
          object.agenteInseritore.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.agenteInseritore.attach(store);
          object.immobileAbbinato.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.immobileAbbinato.attach(store);
          object.tipologiaColloquio.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.tipologiaColloquio.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<Colloquio>(
              object.anagrafiche,
              store,
              obx_int.RelInfo<Colloquio>.toMany(13, object.codColloquio!));
          return object;
        }),
    Contatto: obx_int.EntityDefinition<Contatto>(
        model: _entities[6],
        toOneRelations: (Contatto object) => [object.tipologiaContatto],
        toManyRelations: (Contatto object) => {},
        getId: (Contatto object) => object.codContatto,
        setId: (Contatto object, int id) {
          object.codContatto = id;
        },
        objectToFB: (Contatto object, fb.Builder fbb) {
          final contattoOffset = object.contatto == null
              ? null
              : fbb.writeString(object.contatto!);
          final descrizioneOffset = object.descrizione == null
              ? null
              : fbb.writeString(object.descrizione!);
          fbb.startTable(8);
          fbb.addInt64(0, object.codContatto ?? 0);
          fbb.addOffset(1, contattoOffset);
          fbb.addOffset(2, descrizioneOffset);
          fbb.addInt64(3, object.codTipologiaContatto);
          fbb.addInt64(4, object.codAnagrafica);
          fbb.addInt64(5, object.codAgente);
          fbb.addInt64(6, object.tipologiaContatto.targetId);
          fbb.finish(fbb.endTable());
          return object.codContatto ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Contatto()
            ..codContatto =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..contatto = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..descrizione = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..codTipologiaContatto =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10)
            ..codAnagrafica =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12)
            ..codAgente = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 14);
          object.tipologiaContatto.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.tipologiaContatto.attach(store);
          return object;
        }),
    DatiCatastali: obx_int.EntityDefinition<DatiCatastali>(
        model: _entities[7],
        toOneRelations: (DatiCatastali object) => [],
        toManyRelations: (DatiCatastali object) => {},
        getId: (DatiCatastali object) => object.codDatiCatastali,
        setId: (DatiCatastali object, int id) {
          object.codDatiCatastali = id;
        },
        objectToFB: (DatiCatastali object, fb.Builder fbb) {
          final foglioOffset =
              object.foglio == null ? null : fbb.writeString(object.foglio!);
          final particellaOffset = object.particella == null
              ? null
              : fbb.writeString(object.particella!);
          final subalternoOffset = object.subalterno == null
              ? null
              : fbb.writeString(object.subalterno!);
          final categoriaOffset = object.categoria == null
              ? null
              : fbb.writeString(object.categoria!);
          fbb.startTable(11);
          fbb.addInt64(0, object.codDatiCatastali ?? 0);
          fbb.addOffset(1, foglioOffset);
          fbb.addOffset(2, particellaOffset);
          fbb.addOffset(3, subalternoOffset);
          fbb.addOffset(4, categoriaOffset);
          fbb.addFloat64(5, object.rendita);
          fbb.addFloat64(6, object.redditoDomenicale);
          fbb.addFloat64(7, object.redditoAgricolo);
          fbb.addFloat64(8, object.dimensione);
          fbb.addInt64(9, object.codImmobile);
          fbb.finish(fbb.endTable());
          return object.codDatiCatastali ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DatiCatastali()
            ..codDatiCatastali =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..foglio = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..particella = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..subalterno = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..categoria = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..rendita = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 14)
            ..redditoDomenicale = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 16)
            ..redditoAgricolo = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 18)
            ..dimensione = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 20)
            ..codImmobile = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 22);

          return object;
        }),
    Immagine: obx_int.EntityDefinition<Immagine>(
        model: _entities[8],
        toOneRelations: (Immagine object) => [],
        toManyRelations: (Immagine object) => {},
        getId: (Immagine object) => object.codImmagine,
        setId: (Immagine object, int id) {
          object.codImmagine = id;
        },
        objectToFB: (Immagine object, fb.Builder fbb) {
          final pathImmagineOffset = object.pathImmagine == null
              ? null
              : fbb.writeString(object.pathImmagine!);
          final imgPropsStrOffset = object.imgPropsStr == null
              ? null
              : fbb.writeString(object.imgPropsStr!);
          fbb.startTable(6);
          fbb.addInt64(0, object.codImmagine ?? 0);
          fbb.addInt64(1, object.codImmobile);
          fbb.addInt64(2, object.ordine);
          fbb.addOffset(3, pathImmagineOffset);
          fbb.addOffset(4, imgPropsStrOffset);
          fbb.finish(fbb.endTable());
          return object.codImmagine ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Immagine()
            ..codImmagine =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..codImmobile =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6)
            ..ordine =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8)
            ..pathImmagine = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..imgPropsStr = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12);

          return object;
        }),
    Immobile: obx_int.EntityDefinition<Immobile>(
        model: _entities[9],
        toOneRelations: (Immobile object) => [
              object.agenteInseritore,
              object.riscaldamento,
              object.statoConservativo,
              object.tipologiaImmobile,
              object.classeEnergetica
            ],
        toManyRelations: (Immobile object) => {
              obx_int.RelInfo<Immobile>.toMany(8, object.codImmobile!):
                  object.stanze,
              obx_int.RelInfo<Immobile>.toMany(10, object.codImmobile!):
                  object.immagini,
              obx_int.RelInfo<Immobile>.toMany(12, object.codImmobile!):
                  object.proprietari,
              obx_int.RelInfo<Colloquio>.toOneBacklink(4, object.codImmobile!,
                      (Colloquio srcObject) => srcObject.immobileAbbinato):
                  object.colloqui
            },
        getId: (Immobile object) => object.codImmobile,
        setId: (Immobile object, int id) {
          object.codImmobile = id;
        },
        objectToFB: (Immobile object, fb.Builder fbb) {
          final rifOffset =
              object.rif == null ? null : fbb.writeString(object.rif!);
          final indirizzoOffset = object.indirizzo == null
              ? null
              : fbb.writeString(object.indirizzo!);
          final provinciaOffset = object.provincia == null
              ? null
              : fbb.writeString(object.provincia!);
          final capOffset =
              object.cap == null ? null : fbb.writeString(object.cap!);
          final cittaOffset =
              object.citta == null ? null : fbb.writeString(object.citta!);
          final zonaOffset =
              object.zona == null ? null : fbb.writeString(object.zona!);
          final descrizioneOffset = object.descrizione == null
              ? null
              : fbb.writeString(object.descrizione!);
          final mutuoDescrizioneOffset = object.mutuoDescrizione == null
              ? null
              : fbb.writeString(object.mutuoDescrizione!);
          final varieOffset =
              object.varie == null ? null : fbb.writeString(object.varie!);
          fbb.startTable(26);
          fbb.addInt64(0, object.codImmobile ?? 0);
          fbb.addOffset(1, rifOffset);
          fbb.addOffset(2, indirizzoOffset);
          fbb.addOffset(3, provinciaOffset);
          fbb.addOffset(4, capOffset);
          fbb.addOffset(5, cittaOffset);
          fbb.addOffset(6, zonaOffset);
          fbb.addInt64(7, object.dataInserimento?.millisecondsSinceEpoch);
          fbb.addInt64(8, object.dataLibero?.millisecondsSinceEpoch);
          fbb.addOffset(9, descrizioneOffset);
          fbb.addOffset(10, mutuoDescrizioneOffset);
          fbb.addFloat64(11, object.prezzo);
          fbb.addFloat64(12, object.mutuo);
          fbb.addFloat64(13, object.spese);
          fbb.addOffset(14, varieOffset);
          fbb.addBool(15, object.visione);
          fbb.addBool(16, object.storico);
          fbb.addBool(17, object.affittabile);
          fbb.addInt64(18, object.mq);
          fbb.addInt64(19, object.annoCostruzione);
          fbb.addInt64(20, object.agenteInseritore.targetId);
          fbb.addInt64(21, object.riscaldamento.targetId);
          fbb.addInt64(22, object.statoConservativo.targetId);
          fbb.addInt64(23, object.tipologiaImmobile.targetId);
          fbb.addInt64(24, object.classeEnergetica.targetId);
          fbb.finish(fbb.endTable());
          return object.codImmobile ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dataInserimentoValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18);
          final dataLiberoValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final object = Immobile()
            ..codImmobile =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..rif = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..indirizzo = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..provincia = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..cap = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..citta = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14)
            ..zona = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 16)
            ..dataInserimento = dataInserimentoValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(dataInserimentoValue)
            ..dataLibero = dataLiberoValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(dataLiberoValue)
            ..descrizione = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 22)
            ..mutuoDescrizione = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 24)
            ..prezzo = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 26)
            ..mutuo = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 28)
            ..spese = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 30)
            ..varie = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 32)
            ..visione =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 34)
            ..storico =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 36)
            ..affittabile =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 38)
            ..mq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 40)
            ..annoCostruzione = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 42);
          object.agenteInseritore.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 44, 0);
          object.agenteInseritore.attach(store);
          object.riscaldamento.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 46, 0);
          object.riscaldamento.attach(store);
          object.statoConservativo.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 48, 0);
          object.statoConservativo.attach(store);
          object.tipologiaImmobile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 50, 0);
          object.tipologiaImmobile.attach(store);
          object.classeEnergetica.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 52, 0);
          object.classeEnergetica.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<Immobile>(object.stanze,
              store, obx_int.RelInfo<Immobile>.toMany(8, object.codImmobile!));
          obx_int.InternalToManyAccess.setRelInfo<Immobile>(object.immagini,
              store, obx_int.RelInfo<Immobile>.toMany(10, object.codImmobile!));
          obx_int.InternalToManyAccess.setRelInfo<Immobile>(object.proprietari,
              store, obx_int.RelInfo<Immobile>.toMany(12, object.codImmobile!));
          obx_int.InternalToManyAccess.setRelInfo<Immobile>(
              object.colloqui,
              store,
              obx_int.RelInfo<Colloquio>.toOneBacklink(4, object.codImmobile!,
                  (Colloquio srcObject) => srcObject.immobileAbbinato));
          return object;
        }),
    Riscaldamento: obx_int.EntityDefinition<Riscaldamento>(
        model: _entities[10],
        toOneRelations: (Riscaldamento object) => [],
        toManyRelations: (Riscaldamento object) => {},
        getId: (Riscaldamento object) => object.codRiscaldamento,
        setId: (Riscaldamento object, int id) {
          object.codRiscaldamento = id;
        },
        objectToFB: (Riscaldamento object, fb.Builder fbb) {
          final descrizioneOffset = object.descrizione == null
              ? null
              : fbb.writeString(object.descrizione!);
          fbb.startTable(3);
          fbb.addInt64(0, object.codRiscaldamento ?? 0);
          fbb.addOffset(1, descrizioneOffset);
          fbb.finish(fbb.endTable());
          return object.codRiscaldamento ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Riscaldamento()
            ..codRiscaldamento =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..descrizione = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6);

          return object;
        }),
    StanzaImmobile: obx_int.EntityDefinition<StanzaImmobile>(
        model: _entities[11],
        toOneRelations: (StanzaImmobile object) => [object.tipologiaStanza],
        toManyRelations: (StanzaImmobile object) => {},
        getId: (StanzaImmobile object) => object.codStanzaImmobile,
        setId: (StanzaImmobile object, int id) {
          object.codStanzaImmobile = id;
        },
        objectToFB: (StanzaImmobile object, fb.Builder fbb) {
          fbb.startTable(5);
          fbb.addInt64(0, object.codStanzaImmobile ?? 0);
          fbb.addInt64(1, object.codImmobile);
          fbb.addInt64(2, object.tipologiaStanza.targetId);
          fbb.addInt64(3, object.mq);
          fbb.finish(fbb.endTable());
          return object.codStanzaImmobile ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = StanzaImmobile()
            ..codStanzaImmobile =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..codImmobile =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6)
            ..mq = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 10);
          object.tipologiaStanza.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.tipologiaStanza.attach(store);
          return object;
        }),
    StatoConservativo: obx_int.EntityDefinition<StatoConservativo>(
        model: _entities[12],
        toOneRelations: (StatoConservativo object) => [],
        toManyRelations: (StatoConservativo object) => {},
        getId: (StatoConservativo object) => object.codStatoConservativo,
        setId: (StatoConservativo object, int id) {
          object.codStatoConservativo = id;
        },
        objectToFB: (StatoConservativo object, fb.Builder fbb) {
          final descrizioneOffset = object.descrizione == null
              ? null
              : fbb.writeString(object.descrizione!);
          fbb.startTable(3);
          fbb.addInt64(0, object.codStatoConservativo ?? 0);
          fbb.addOffset(1, descrizioneOffset);
          fbb.finish(fbb.endTable());
          return object.codStatoConservativo ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = StatoConservativo()
            ..codStatoConservativo =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..descrizione = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6);

          return object;
        }),
    TipologiaAppuntamento: obx_int.EntityDefinition<TipologiaAppuntamento>(
        model: _entities[13],
        toOneRelations: (TipologiaAppuntamento object) => [],
        toManyRelations: (TipologiaAppuntamento object) => {},
        getId: (TipologiaAppuntamento object) =>
            object.codTipologiaAppuntamento,
        setId: (TipologiaAppuntamento object, int id) {
          object.codTipologiaAppuntamento = id;
        },
        objectToFB: (TipologiaAppuntamento object, fb.Builder fbb) {
          final descrizioneOffset = object.descrizione == null
              ? null
              : fbb.writeString(object.descrizione!);
          final gCalColorOffset = object.gCalColor == null
              ? null
              : fbb.writeString(object.gCalColor!);
          fbb.startTable(5);
          fbb.addInt64(0, object.codTipologiaAppuntamento ?? 0);
          fbb.addOffset(1, descrizioneOffset);
          fbb.addOffset(2, gCalColorOffset);
          fbb.addInt64(3, object.ordine);
          fbb.finish(fbb.endTable());
          return object.codTipologiaAppuntamento ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TipologiaAppuntamento()
            ..codTipologiaAppuntamento =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..descrizione = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..gCalColor = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..ordine = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 10);

          return object;
        }),
    TipologiaColloquio: obx_int.EntityDefinition<TipologiaColloquio>(
        model: _entities[14],
        toOneRelations: (TipologiaColloquio object) => [],
        toManyRelations: (TipologiaColloquio object) => {},
        getId: (TipologiaColloquio object) => object.codTipologiaColloquio,
        setId: (TipologiaColloquio object, int id) {
          object.codTipologiaColloquio = id;
        },
        objectToFB: (TipologiaColloquio object, fb.Builder fbb) {
          final descrizioneOffset = object.descrizione == null
              ? null
              : fbb.writeString(object.descrizione!);
          fbb.startTable(3);
          fbb.addInt64(0, object.codTipologiaColloquio ?? 0);
          fbb.addOffset(1, descrizioneOffset);
          fbb.finish(fbb.endTable());
          return object.codTipologiaColloquio ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TipologiaColloquio()
            ..codTipologiaColloquio =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..descrizione = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6);

          return object;
        }),
    TipologiaContatto: obx_int.EntityDefinition<TipologiaContatto>(
        model: _entities[15],
        toOneRelations: (TipologiaContatto object) => [],
        toManyRelations: (TipologiaContatto object) => {},
        getId: (TipologiaContatto object) => object.codTipologiaContatto,
        setId: (TipologiaContatto object, int id) {
          object.codTipologiaContatto = id;
        },
        objectToFB: (TipologiaContatto object, fb.Builder fbb) {
          final descrizioneOffset = object.descrizione == null
              ? null
              : fbb.writeString(object.descrizione!);
          fbb.startTable(3);
          fbb.addInt64(0, object.codTipologiaContatto ?? 0);
          fbb.addOffset(1, descrizioneOffset);
          fbb.finish(fbb.endTable());
          return object.codTipologiaContatto ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TipologiaContatto()
            ..codTipologiaContatto =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..descrizione = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6);

          return object;
        }),
    TipologiaImmobile: obx_int.EntityDefinition<TipologiaImmobile>(
        model: _entities[16],
        toOneRelations: (TipologiaImmobile object) => [],
        toManyRelations: (TipologiaImmobile object) => {},
        getId: (TipologiaImmobile object) => object.codTipologiaImmobile,
        setId: (TipologiaImmobile object, int id) {
          object.codTipologiaImmobile = id;
        },
        objectToFB: (TipologiaImmobile object, fb.Builder fbb) {
          final descrizioneOffset = object.descrizione == null
              ? null
              : fbb.writeString(object.descrizione!);
          fbb.startTable(3);
          fbb.addInt64(0, object.codTipologiaImmobile ?? 0);
          fbb.addOffset(1, descrizioneOffset);
          fbb.finish(fbb.endTable());
          return object.codTipologiaImmobile ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TipologiaImmobile()
            ..codTipologiaImmobile =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..descrizione = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6);

          return object;
        }),
    TipologiaStanza: obx_int.EntityDefinition<TipologiaStanza>(
        model: _entities[17],
        toOneRelations: (TipologiaStanza object) => [],
        toManyRelations: (TipologiaStanza object) => {},
        getId: (TipologiaStanza object) => object.codTipologiaStanza,
        setId: (TipologiaStanza object, int id) {
          object.codTipologiaStanza = id;
        },
        objectToFB: (TipologiaStanza object, fb.Builder fbb) {
          final descrizioneOffset = object.descrizione == null
              ? null
              : fbb.writeString(object.descrizione!);
          fbb.startTable(3);
          fbb.addInt64(0, object.codTipologiaStanza ?? 0);
          fbb.addOffset(1, descrizioneOffset);
          fbb.finish(fbb.endTable());
          return object.codTipologiaStanza ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TipologiaStanza()
            ..codTipologiaStanza =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..descrizione = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Agente] entity fields to define ObjectBox queries.
class Agente_ {
  /// See [Agente.codAgente].
  static final codAgente =
      obx.QueryIntegerProperty<Agente>(_entities[0].properties[0]);

  /// See [Agente.nome].
  static final nome =
      obx.QueryStringProperty<Agente>(_entities[0].properties[1]);

  /// See [Agente.cognome].
  static final cognome =
      obx.QueryStringProperty<Agente>(_entities[0].properties[2]);

  /// See [Agente.indirizzo].
  static final indirizzo =
      obx.QueryStringProperty<Agente>(_entities[0].properties[3]);

  /// See [Agente.provincia].
  static final provincia =
      obx.QueryStringProperty<Agente>(_entities[0].properties[4]);

  /// See [Agente.cap].
  static final cap =
      obx.QueryStringProperty<Agente>(_entities[0].properties[5]);

  /// See [Agente.citta].
  static final citta =
      obx.QueryStringProperty<Agente>(_entities[0].properties[6]);

  /// see [Agente.contatti]
  static final contatti =
      obx.QueryRelationToMany<Agente, Contatto>(_entities[0].relations[0]);
}

/// [Anagrafica] entity fields to define ObjectBox queries.
class Anagrafica_ {
  /// See [Anagrafica.codAnagrafica].
  static final codAnagrafica =
      obx.QueryIntegerProperty<Anagrafica>(_entities[1].properties[0]);

  /// See [Anagrafica.nome].
  static final nome =
      obx.QueryStringProperty<Anagrafica>(_entities[1].properties[1]);

  /// See [Anagrafica.cognome].
  static final cognome =
      obx.QueryStringProperty<Anagrafica>(_entities[1].properties[2]);

  /// See [Anagrafica.ragioneSociale].
  static final ragioneSociale =
      obx.QueryStringProperty<Anagrafica>(_entities[1].properties[3]);

  /// See [Anagrafica.indirizzo].
  static final indirizzo =
      obx.QueryStringProperty<Anagrafica>(_entities[1].properties[4]);

  /// See [Anagrafica.provincia].
  static final provincia =
      obx.QueryStringProperty<Anagrafica>(_entities[1].properties[5]);

  /// See [Anagrafica.cap].
  static final cap =
      obx.QueryStringProperty<Anagrafica>(_entities[1].properties[6]);

  /// See [Anagrafica.citta].
  static final citta =
      obx.QueryStringProperty<Anagrafica>(_entities[1].properties[7]);

  /// See [Anagrafica.dataInserimento].
  static final dataInserimento =
      obx.QueryDateProperty<Anagrafica>(_entities[1].properties[8]);

  /// See [Anagrafica.commento].
  static final commento =
      obx.QueryStringProperty<Anagrafica>(_entities[1].properties[9]);

  /// See [Anagrafica.storico].
  static final storico =
      obx.QueryBooleanProperty<Anagrafica>(_entities[1].properties[10]);

  /// See [Anagrafica.classeCliente].
  static final classeCliente =
      obx.QueryRelationToOne<Anagrafica, ClasseCliente>(
          _entities[1].properties[11]);

  /// See [Anagrafica.agenteInseritore].
  static final agenteInseritore =
      obx.QueryRelationToOne<Anagrafica, Agente>(_entities[1].properties[12]);

  /// See [Anagrafica.codiceFiscale].
  static final codiceFiscale =
      obx.QueryStringProperty<Anagrafica>(_entities[1].properties[13]);

  /// See [Anagrafica.partitaIva].
  static final partitaIva =
      obx.QueryStringProperty<Anagrafica>(_entities[1].properties[14]);

  /// see [Anagrafica.contatti]
  static final contatti =
      obx.QueryRelationToMany<Anagrafica, Contatto>(_entities[1].relations[0]);

  /// see [Anagrafica.immobiliAbbinati]
  static final immobiliAbbinati =
      obx.QueryRelationToMany<Anagrafica, Immobile>(_entities[1].relations[1]);

  /// see [Anagrafica.appuntamenti]
  static final appuntamenti = obx.QueryRelationToMany<Anagrafica, Appuntamento>(
      _entities[1].relations[2]);
}

/// [Appuntamento] entity fields to define ObjectBox queries.
class Appuntamento_ {
  /// See [Appuntamento.codAppuntamento].
  static final codAppuntamento =
      obx.QueryIntegerProperty<Appuntamento>(_entities[2].properties[0]);

  /// See [Appuntamento.dataInserimento].
  static final dataInserimento =
      obx.QueryDateProperty<Appuntamento>(_entities[2].properties[1]);

  /// See [Appuntamento.dataAppuntamento].
  static final dataAppuntamento =
      obx.QueryDateProperty<Appuntamento>(_entities[2].properties[2]);

  /// See [Appuntamento.dataFineAppuntamento].
  static final dataFineAppuntamento =
      obx.QueryDateProperty<Appuntamento>(_entities[2].properties[3]);

  /// See [Appuntamento.tipologiaAppuntamento].
  static final tipologiaAppuntamento =
      obx.QueryRelationToOne<Appuntamento, TipologiaAppuntamento>(
          _entities[2].properties[4]);

  /// See [Appuntamento.iCalUID].
  static final iCalUID =
      obx.QueryStringProperty<Appuntamento>(_entities[2].properties[5]);

  /// See [Appuntamento.descrizione].
  static final descrizione =
      obx.QueryStringProperty<Appuntamento>(_entities[2].properties[6]);

  /// See [Appuntamento.luogo].
  static final luogo =
      obx.QueryStringProperty<Appuntamento>(_entities[2].properties[7]);

  /// see [Appuntamento.agentiAppuntamento]
  static final agentiAppuntamento =
      obx.QueryRelationToMany<Appuntamento, Agente>(_entities[2].relations[0]);

  /// see [Appuntamento.anagraficheAppuntamento]
  static final anagraficheAppuntamento =
      obx.QueryRelationToMany<Appuntamento, Anagrafica>(
          _entities[2].relations[1]);
}

/// [ClasseCliente] entity fields to define ObjectBox queries.
class ClasseCliente_ {
  /// See [ClasseCliente.codClasseCliente].
  static final codClasseCliente =
      obx.QueryIntegerProperty<ClasseCliente>(_entities[3].properties[0]);

  /// See [ClasseCliente.descrizione].
  static final descrizione =
      obx.QueryStringProperty<ClasseCliente>(_entities[3].properties[1]);

  /// See [ClasseCliente.ordine].
  static final ordine =
      obx.QueryIntegerProperty<ClasseCliente>(_entities[3].properties[2]);
}

/// [ClasseEnergetica] entity fields to define ObjectBox queries.
class ClasseEnergetica_ {
  /// See [ClasseEnergetica.codClasseEnergetica].
  static final codClasseEnergetica =
      obx.QueryIntegerProperty<ClasseEnergetica>(_entities[4].properties[0]);

  /// See [ClasseEnergetica.nome].
  static final nome =
      obx.QueryStringProperty<ClasseEnergetica>(_entities[4].properties[1]);

  /// See [ClasseEnergetica.descrizione].
  static final descrizione =
      obx.QueryStringProperty<ClasseEnergetica>(_entities[4].properties[2]);

  /// See [ClasseEnergetica.ordine].
  static final ordine =
      obx.QueryIntegerProperty<ClasseEnergetica>(_entities[4].properties[3]);
}

/// [Colloquio] entity fields to define ObjectBox queries.
class Colloquio_ {
  /// See [Colloquio.codColloquio].
  static final codColloquio =
      obx.QueryIntegerProperty<Colloquio>(_entities[5].properties[0]);

  /// See [Colloquio.descrizione].
  static final descrizione =
      obx.QueryStringProperty<Colloquio>(_entities[5].properties[1]);

  /// See [Colloquio.agenteInseritore].
  static final agenteInseritore =
      obx.QueryRelationToOne<Colloquio, Agente>(_entities[5].properties[2]);

  /// See [Colloquio.immobileAbbinato].
  static final immobileAbbinato =
      obx.QueryRelationToOne<Colloquio, Immobile>(_entities[5].properties[3]);

  /// See [Colloquio.tipologiaColloquio].
  static final tipologiaColloquio =
      obx.QueryRelationToOne<Colloquio, TipologiaColloquio>(
          _entities[5].properties[4]);

  /// See [Colloquio.dataInserimento].
  static final dataInserimento =
      obx.QueryDateProperty<Colloquio>(_entities[5].properties[5]);

  /// See [Colloquio.dataColloquio].
  static final dataColloquio =
      obx.QueryDateProperty<Colloquio>(_entities[5].properties[6]);

  /// See [Colloquio.luogoIncontro].
  static final luogoIncontro =
      obx.QueryStringProperty<Colloquio>(_entities[5].properties[7]);

  /// See [Colloquio.scadenziere].
  static final scadenziere =
      obx.QueryBooleanProperty<Colloquio>(_entities[5].properties[8]);

  /// See [Colloquio.commentoAgenzia].
  static final commentoAgenzia =
      obx.QueryStringProperty<Colloquio>(_entities[5].properties[9]);

  /// See [Colloquio.commentoCliente].
  static final commentoCliente =
      obx.QueryStringProperty<Colloquio>(_entities[5].properties[10]);

  /// See [Colloquio.codParent].
  static final codParent =
      obx.QueryIntegerProperty<Colloquio>(_entities[5].properties[11]);

  /// See [Colloquio.iCalUid].
  static final iCalUid =
      obx.QueryStringProperty<Colloquio>(_entities[5].properties[12]);

  /// see [Colloquio.anagrafiche]
  static final anagrafiche =
      obx.QueryRelationToMany<Colloquio, Anagrafica>(_entities[5].relations[0]);
}

/// [Contatto] entity fields to define ObjectBox queries.
class Contatto_ {
  /// See [Contatto.codContatto].
  static final codContatto =
      obx.QueryIntegerProperty<Contatto>(_entities[6].properties[0]);

  /// See [Contatto.contatto].
  static final contatto =
      obx.QueryStringProperty<Contatto>(_entities[6].properties[1]);

  /// See [Contatto.descrizione].
  static final descrizione =
      obx.QueryStringProperty<Contatto>(_entities[6].properties[2]);

  /// See [Contatto.codTipologiaContatto].
  static final codTipologiaContatto =
      obx.QueryIntegerProperty<Contatto>(_entities[6].properties[3]);

  /// See [Contatto.codAnagrafica].
  static final codAnagrafica =
      obx.QueryIntegerProperty<Contatto>(_entities[6].properties[4]);

  /// See [Contatto.codAgente].
  static final codAgente =
      obx.QueryIntegerProperty<Contatto>(_entities[6].properties[5]);

  /// See [Contatto.tipologiaContatto].
  static final tipologiaContatto =
      obx.QueryRelationToOne<Contatto, TipologiaContatto>(
          _entities[6].properties[6]);
}

/// [DatiCatastali] entity fields to define ObjectBox queries.
class DatiCatastali_ {
  /// See [DatiCatastali.codDatiCatastali].
  static final codDatiCatastali =
      obx.QueryIntegerProperty<DatiCatastali>(_entities[7].properties[0]);

  /// See [DatiCatastali.foglio].
  static final foglio =
      obx.QueryStringProperty<DatiCatastali>(_entities[7].properties[1]);

  /// See [DatiCatastali.particella].
  static final particella =
      obx.QueryStringProperty<DatiCatastali>(_entities[7].properties[2]);

  /// See [DatiCatastali.subalterno].
  static final subalterno =
      obx.QueryStringProperty<DatiCatastali>(_entities[7].properties[3]);

  /// See [DatiCatastali.categoria].
  static final categoria =
      obx.QueryStringProperty<DatiCatastali>(_entities[7].properties[4]);

  /// See [DatiCatastali.rendita].
  static final rendita =
      obx.QueryDoubleProperty<DatiCatastali>(_entities[7].properties[5]);

  /// See [DatiCatastali.redditoDomenicale].
  static final redditoDomenicale =
      obx.QueryDoubleProperty<DatiCatastali>(_entities[7].properties[6]);

  /// See [DatiCatastali.redditoAgricolo].
  static final redditoAgricolo =
      obx.QueryDoubleProperty<DatiCatastali>(_entities[7].properties[7]);

  /// See [DatiCatastali.dimensione].
  static final dimensione =
      obx.QueryDoubleProperty<DatiCatastali>(_entities[7].properties[8]);

  /// See [DatiCatastali.codImmobile].
  static final codImmobile =
      obx.QueryIntegerProperty<DatiCatastali>(_entities[7].properties[9]);
}

/// [Immagine] entity fields to define ObjectBox queries.
class Immagine_ {
  /// See [Immagine.codImmagine].
  static final codImmagine =
      obx.QueryIntegerProperty<Immagine>(_entities[8].properties[0]);

  /// See [Immagine.codImmobile].
  static final codImmobile =
      obx.QueryIntegerProperty<Immagine>(_entities[8].properties[1]);

  /// See [Immagine.ordine].
  static final ordine =
      obx.QueryIntegerProperty<Immagine>(_entities[8].properties[2]);

  /// See [Immagine.pathImmagine].
  static final pathImmagine =
      obx.QueryStringProperty<Immagine>(_entities[8].properties[3]);

  /// See [Immagine.imgPropsStr].
  static final imgPropsStr =
      obx.QueryStringProperty<Immagine>(_entities[8].properties[4]);
}

/// [Immobile] entity fields to define ObjectBox queries.
class Immobile_ {
  /// See [Immobile.codImmobile].
  static final codImmobile =
      obx.QueryIntegerProperty<Immobile>(_entities[9].properties[0]);

  /// See [Immobile.rif].
  static final rif =
      obx.QueryStringProperty<Immobile>(_entities[9].properties[1]);

  /// See [Immobile.indirizzo].
  static final indirizzo =
      obx.QueryStringProperty<Immobile>(_entities[9].properties[2]);

  /// See [Immobile.provincia].
  static final provincia =
      obx.QueryStringProperty<Immobile>(_entities[9].properties[3]);

  /// See [Immobile.cap].
  static final cap =
      obx.QueryStringProperty<Immobile>(_entities[9].properties[4]);

  /// See [Immobile.citta].
  static final citta =
      obx.QueryStringProperty<Immobile>(_entities[9].properties[5]);

  /// See [Immobile.zona].
  static final zona =
      obx.QueryStringProperty<Immobile>(_entities[9].properties[6]);

  /// See [Immobile.dataInserimento].
  static final dataInserimento =
      obx.QueryDateProperty<Immobile>(_entities[9].properties[7]);

  /// See [Immobile.dataLibero].
  static final dataLibero =
      obx.QueryDateProperty<Immobile>(_entities[9].properties[8]);

  /// See [Immobile.descrizione].
  static final descrizione =
      obx.QueryStringProperty<Immobile>(_entities[9].properties[9]);

  /// See [Immobile.mutuoDescrizione].
  static final mutuoDescrizione =
      obx.QueryStringProperty<Immobile>(_entities[9].properties[10]);

  /// See [Immobile.prezzo].
  static final prezzo =
      obx.QueryDoubleProperty<Immobile>(_entities[9].properties[11]);

  /// See [Immobile.mutuo].
  static final mutuo =
      obx.QueryDoubleProperty<Immobile>(_entities[9].properties[12]);

  /// See [Immobile.spese].
  static final spese =
      obx.QueryDoubleProperty<Immobile>(_entities[9].properties[13]);

  /// See [Immobile.varie].
  static final varie =
      obx.QueryStringProperty<Immobile>(_entities[9].properties[14]);

  /// See [Immobile.visione].
  static final visione =
      obx.QueryBooleanProperty<Immobile>(_entities[9].properties[15]);

  /// See [Immobile.storico].
  static final storico =
      obx.QueryBooleanProperty<Immobile>(_entities[9].properties[16]);

  /// See [Immobile.affittabile].
  static final affittabile =
      obx.QueryBooleanProperty<Immobile>(_entities[9].properties[17]);

  /// See [Immobile.mq].
  static final mq =
      obx.QueryIntegerProperty<Immobile>(_entities[9].properties[18]);

  /// See [Immobile.annoCostruzione].
  static final annoCostruzione =
      obx.QueryIntegerProperty<Immobile>(_entities[9].properties[19]);

  /// See [Immobile.agenteInseritore].
  static final agenteInseritore =
      obx.QueryRelationToOne<Immobile, Agente>(_entities[9].properties[20]);

  /// See [Immobile.riscaldamento].
  static final riscaldamento = obx.QueryRelationToOne<Immobile, Riscaldamento>(
      _entities[9].properties[21]);

  /// See [Immobile.statoConservativo].
  static final statoConservativo =
      obx.QueryRelationToOne<Immobile, StatoConservativo>(
          _entities[9].properties[22]);

  /// See [Immobile.tipologiaImmobile].
  static final tipologiaImmobile =
      obx.QueryRelationToOne<Immobile, TipologiaImmobile>(
          _entities[9].properties[23]);

  /// See [Immobile.classeEnergetica].
  static final classeEnergetica =
      obx.QueryRelationToOne<Immobile, ClasseEnergetica>(
          _entities[9].properties[24]);

  /// see [Immobile.stanze]
  static final stanze = obx.QueryRelationToMany<Immobile, StanzaImmobile>(
      _entities[9].relations[0]);

  /// see [Immobile.immagini]
  static final immagini =
      obx.QueryRelationToMany<Immobile, Immagine>(_entities[9].relations[1]);

  /// see [Immobile.proprietari]
  static final proprietari =
      obx.QueryRelationToMany<Immobile, Anagrafica>(_entities[9].relations[2]);

  /// see [Immobile.colloqui]
  static final colloqui =
      obx.QueryBacklinkToMany<Colloquio, Immobile>(Colloquio_.immobileAbbinato);
}

/// [Riscaldamento] entity fields to define ObjectBox queries.
class Riscaldamento_ {
  /// See [Riscaldamento.codRiscaldamento].
  static final codRiscaldamento =
      obx.QueryIntegerProperty<Riscaldamento>(_entities[10].properties[0]);

  /// See [Riscaldamento.descrizione].
  static final descrizione =
      obx.QueryStringProperty<Riscaldamento>(_entities[10].properties[1]);
}

/// [StanzaImmobile] entity fields to define ObjectBox queries.
class StanzaImmobile_ {
  /// See [StanzaImmobile.codStanzaImmobile].
  static final codStanzaImmobile =
      obx.QueryIntegerProperty<StanzaImmobile>(_entities[11].properties[0]);

  /// See [StanzaImmobile.codImmobile].
  static final codImmobile =
      obx.QueryIntegerProperty<StanzaImmobile>(_entities[11].properties[1]);

  /// See [StanzaImmobile.tipologiaStanza].
  static final tipologiaStanza =
      obx.QueryRelationToOne<StanzaImmobile, TipologiaStanza>(
          _entities[11].properties[2]);

  /// See [StanzaImmobile.mq].
  static final mq =
      obx.QueryIntegerProperty<StanzaImmobile>(_entities[11].properties[3]);
}

/// [StatoConservativo] entity fields to define ObjectBox queries.
class StatoConservativo_ {
  /// See [StatoConservativo.codStatoConservativo].
  static final codStatoConservativo =
      obx.QueryIntegerProperty<StatoConservativo>(_entities[12].properties[0]);

  /// See [StatoConservativo.descrizione].
  static final descrizione =
      obx.QueryStringProperty<StatoConservativo>(_entities[12].properties[1]);
}

/// [TipologiaAppuntamento] entity fields to define ObjectBox queries.
class TipologiaAppuntamento_ {
  /// See [TipologiaAppuntamento.codTipologiaAppuntamento].
  static final codTipologiaAppuntamento =
      obx.QueryIntegerProperty<TipologiaAppuntamento>(
          _entities[13].properties[0]);

  /// See [TipologiaAppuntamento.descrizione].
  static final descrizione = obx.QueryStringProperty<TipologiaAppuntamento>(
      _entities[13].properties[1]);

  /// See [TipologiaAppuntamento.gCalColor].
  static final gCalColor = obx.QueryStringProperty<TipologiaAppuntamento>(
      _entities[13].properties[2]);

  /// See [TipologiaAppuntamento.ordine].
  static final ordine = obx.QueryIntegerProperty<TipologiaAppuntamento>(
      _entities[13].properties[3]);
}

/// [TipologiaColloquio] entity fields to define ObjectBox queries.
class TipologiaColloquio_ {
  /// See [TipologiaColloquio.codTipologiaColloquio].
  static final codTipologiaColloquio =
      obx.QueryIntegerProperty<TipologiaColloquio>(_entities[14].properties[0]);

  /// See [TipologiaColloquio.descrizione].
  static final descrizione =
      obx.QueryStringProperty<TipologiaColloquio>(_entities[14].properties[1]);
}

/// [TipologiaContatto] entity fields to define ObjectBox queries.
class TipologiaContatto_ {
  /// See [TipologiaContatto.codTipologiaContatto].
  static final codTipologiaContatto =
      obx.QueryIntegerProperty<TipologiaContatto>(_entities[15].properties[0]);

  /// See [TipologiaContatto.descrizione].
  static final descrizione =
      obx.QueryStringProperty<TipologiaContatto>(_entities[15].properties[1]);
}

/// [TipologiaImmobile] entity fields to define ObjectBox queries.
class TipologiaImmobile_ {
  /// See [TipologiaImmobile.codTipologiaImmobile].
  static final codTipologiaImmobile =
      obx.QueryIntegerProperty<TipologiaImmobile>(_entities[16].properties[0]);

  /// See [TipologiaImmobile.descrizione].
  static final descrizione =
      obx.QueryStringProperty<TipologiaImmobile>(_entities[16].properties[1]);
}

/// [TipologiaStanza] entity fields to define ObjectBox queries.
class TipologiaStanza_ {
  /// See [TipologiaStanza.codTipologiaStanza].
  static final codTipologiaStanza =
      obx.QueryIntegerProperty<TipologiaStanza>(_entities[17].properties[0]);

  /// See [TipologiaStanza.descrizione].
  static final descrizione =
      obx.QueryStringProperty<TipologiaStanza>(_entities[17].properties[1]);
}
